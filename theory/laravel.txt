Composer
    - Application-level package manager for the PHP programming language that provides a standard format for managing dependencies of PHP software and required libraries.
    Create project
        # Template
            composer create-project laravel\laravel [project_name]
    composer.json
        - File chứa các composer dependencies của project.
    Require
        Add package to project
            # Template
                $ composer require [name_package]
        Add Laravel UI
            # Code
                $ composer require laravel/ui --dev
                $ php artisan ui vue
                $ php artisan ui vue --auth
Artisan
    - The command-line interface của Laravel.
    - Assist with manage files in project
    list
        - List all commands of Artisan
        # Template
            $ php artisan list
    help    
        - Show information of another command
        # Template
            $ php artisan help [other command]
        # Code
            $ php artisan help view:cache
    serve
        - Serve the application on the PHP development server.
        # Template
            $ php artisan serve
    up
        - Bring the application out of maintenance mode
        - Như thế mới có thể run được application.
        # Template
            $ php artisan up
    down
        - Put the application into maintenance mode.
        # Template 
            $ php artisan down
    ui
        - Swap the front-end scaffolding for the application.
        - Chuyển ui của Laravel sang view
        # Code
            $ php artisan ui vue --auth
    tinker
        - Console environment to run directly php code
        # Template
            $ php artisan tinker
    migrate
        - Run migrations files.
        # Code
            $ php artisan migrate
        migrate:fresh
            - Reset and re-run all migrations.
            # Template
                $ php artisan migrate:fresh
    make
        make:controller
            - Tạo Controller
            # Template
                $ php artisan make:controller ['name controller']
        make:model
        # Template
            $ php artisan make:model ['name model']
            $ php artisan make:model ['name model'] -m //tạo luôn migrate luôn với model
            $ php artisan make:model ['name model'] -fmc //bonus factory + migration + controller
        make:policy
        - Policy là class định nghĩa quyền thực thi vào một đối tượng cụ thể nào đó.
            # Template
                $ php artisan make:policy [name_policy]
        - `-m [name_model]` : gán directly policy với model cụ thể
            # Code
                $ php artisan make:policy ProfilePolicy -m Profile
        make:channel
            - Create a new channel class
                $ php artisan make:channel [name_channel]
        storage:link
            - Create link từ public tới storage
            - Như thế thì mới có thể lấy directly resource  trong storage = url
                # Code
                    $ php artisan storage:link
                    //sau đó để get file trong storage
                    /storage/uploads/tên_sau_khi_upload
Directory Structure
    App
        - Directory contains the core code of your application.
    Bootstrap
        - Những file hỗ trợ cho framework chạy
    Config
        - Directory contains all of your application's configuration files.
    Database
        - Directory contains your database migrations, model factories, and seeds.
    Public
        - This directory also houses assets such as images, JavaScript, and CSS.
        - Những resources có thể lấy trực tiếp bởi view qua link.
            # File
                index.php
        - The entry point for all requests entering your application and configures autoloading.
    Resources
        - Directory contains your views as well as your raw.
        - Un-compiled assets such as LESS, SASS, or JavaScript.
    Views
        `.blade.php`
            - Rendering template.
            - Chứa html
    Routes
        - Directory contains all of the route definitions for your application.
        web.php 
            - File contains routes that the `RouteServiceProvider` places in the `web` middleware group, which provides session state, CSRF protection, and cookie encryption. 
            - Chứa các routes không phải stateless (RESTful API) => lưu trong đây
            - `web.php` : register web routes for project.
            - loaded by the RouteServiceProvider.
            - Link url to Controller phù hợp
        # Code
            Route::get('/home', 'HomeController@index')->name('home');
            //GET + /home -> HomeController @ index() 
            //Route::get()->name('tên tắt') => <form method="GET" action="home"> 
            //=> là call HomeController @ index() 
        - Truyền argument cho url
            Route::method('/url/{argument}', 'NameController');
            Route::get('/profile/{user}', 'ProfileController@index')->name('profile.show');

        api.php 
            - Contains routes that the `RouteServiceProvider` places in the `api` middleware group, which provides rate limiting. 
            - These routes are intended to be stateless, so requests entering the application through these routes are intended to be authenticated via tokens and will not have access to session state.
        console.php
            - Define console commands. 
            - Each Closure is bound to a command instance allowing a simple approach to interacting with each command's IO methods. 
            - Even though this file does not define HTTP routes, it defines console based entry points (routes) into your application.

        channels.php
            - Register all of the event broadcasting channels that application supports.
    Storage
        - The `storage` directory contains your compiled Blade templates, file based sessions, file caches, and other files generated by the framework. 
    Tests
        - Contains all test files
    Ventor
        - All dependencies.
    .env
        - Chứa configuration của project.
        - Có chứa thông tin của database.

App Directory
    Broadcasting
    - The `Broadcasting` directory contains all of the broadcast channel classes for your application.
    Console
    - Contains all of the custom Artisan commands for your application.
    Http
    - All of the logic to handle requests entering application.
    Controllers
        - Chứa các file controller cho View
        - Khi submit form thì sẽ redirect to controller sử lý rồi redirect lại view.
        - Argument từ url truyền vào function = function argument
            # Code
                Route::get('/profile/{user}', 'ProfileController@index')->name('profile.show');
                class ProfileController extends Controller
                {
                    public function index($user) {
                    ...
    Middleware
        - Middleware là những process chạy trước khi requrest được xử lý.
    Model files
        HasRelationships
            - belongsTo
                - Ứng với 1 đầu của quan hệ 1-1 or đầu many trong quan hệ 1-many.
                    # Code
                        $this->belongsTo(User::class);
            - hasOne
                - Ứng với đầu còn lai trong quan hệ 1-1
                # Code
                    $this->hasOne(Profile::class);
            - hasMany
                - Ứng với đầu 1 của quan hệ 1-many
                # Code
                    $this->hasMany(Post::class);
            - belongToMany
                - Ứng với 1 đầu của quan hệ Many-Many
Request Lifecycle
    Lifecycle Overview
        First Things
            - Khi init application => call `index.php`
            - `index.php` call `bootstrap/app.php`
        HTTP / Console Kernels
            - The incoming request is sent to either the HTTP kernel or the console kernel.
            - Depending on the type of request that is entering the application.
            - These two kernels serve as the central location that all requests flow through.
            - HTTP request sẽ phải flow qua `HTTP/Kernel.php`
            - The HTTP kernel also defines a list of HTTP middleware that all requests must pass through before being handled by the application.
    HTTP Classes
        Request
            - Là argument cho mọi controller function.
            - Chứa thông tin của request.
            input()
                - Lấy input trong form của request.
                - Thường chỉ return string
                    # Code
                        $input = $request->input('name');
            query()
                - Lấy argument trên url
                    # Code
                        $argument = $request->query('name');
            all()
                - Get all input & query
                - Return array
                    # Code
                    $array = $request->all();
            has()
                - Kiểm tra input | argument có tồn tại trong request không.
                    # Code
                        $check = $request->has('name'); //return boolean
            hasAny()
                - Kiểm tra có tồn tại 1 trong những input | argument trong request không.
                    # Code
                        $check = $request->has(['name1', 'name2']); //return boolean
Database Directory
    Migrations
        - Là những file php thay thế cho sql để làm việc với databse
    Factories
        - Là những file để fake data cho model trong database.
        - Từ đó có thể tạo data có sẵn để mockup, test, …
